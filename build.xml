<?xml version="1.0" encoding="UTF-8"?>
<project name="Spiffy UI Framework Sample Project" xmlns:ivy="antlib:org.apache.ivy.ant" default="all" basedir=".">

    <target name="all" depends="setup,resolve" description="Build, compile, and package the entire application">
        <antcall target="gwt-compile">
            <param name="gwttarget" value="org.spiffyui.hellospiffynode.index"/>
        </antcall>
    </target>
    
    <target name="clearcache" description="Clear the Apache Ivy cache" depends="setup,ivySettings" unless="build.from.maven">
        <ivy:cleancache />
    </target>
    
    <target name="ivySettings" unless="build.from.maven">
        <ivy:settings file="${build}/ivysettings.xml" />
    </target>
    
    <target name="resolve" description="Retrieve dependencies with Apache Ivy" depends="ivySettings" unless="build.from.maven">
        <ivy:retrieve />
    </target>
    
    <property name="ivy.install.version" value="2.1.0-rc2" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="hasDownloadedIvy">
        <property name="hasDownloadedIvy" value="true" />

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    
    <target name="setup" description="Setup build dependencies and properties" depends="init-ivy">
        <property environment="env"/>

        <!-- These are all the project relative paths.  Please add new paths
             here so they are easier to find when they change. -->
        <condition property="build.base" value="${env.SPSAMPLE_BASE}" else="${basedir}">
          <isset property="${env.env.SPSAMPLE_BASE}"/>
        </condition>
        <property name="root" location="${build.base}"/>
        <property name="build" location="${build.base}/build"/>
        <property name="ivy.lib.dir" value="${build}/lib"/>
        <property name="sample.src" location="${root}/src/main/java"/>
        <property name="sample.out" location="${root}/target"/>
        <property name="sample.out.www" location="${sample.out}/www"/>
        
        <mkdir dir="${sample.out}"/>
        <mkdir dir="${sample.out.www}"/>
    </target>
    
    <!-- This target calls the GWT compiler inline and
         moves the files around so we get the compiled
         GWT without the directory with the package name -->
    <target name="gwt-compile" description="Call the GWT compiler for this project">
        <java classname="com.google.gwt.dev.Compiler"
            fork="true" failonerror="true" maxmemory="256m">
            <arg value="-style"/>
            <arg value="PRETTY"/>
            <arg value="-war"/>
            <arg value="${sample.out.www}"/>
            <arg value="${gwttarget}"/>
            <classpath>
                <pathelement location="${sample.src}"/>
                <fileset dir="${build}/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
        
        <!-- GWT compiles files into a directory with the same
             name as the package.  We want to strip that off. 
             If we add more GWT modules to the project we'll 
             need to skip this step for them. -->
        <move todir="${sample.out.www}" failonerror="false">
            <fileset dir="${sample.out.www}/org.spiffyui.hellospiffynode.index" includes="**/*" />
        </move>
        
        <delete dir="${sample.out.www}/org.spiffyui.hellospiffynode.index" />
        
        <echo>
========================================================================

        To start Hello Spiffy Node, use the command

        &lt;NODE_HOME&gt;/node HelloSpiffyNode.js

        It will then provide instructions for accessing 
        the running application once the server is up.

========================================================================
        </echo>

    </target>
    
    <target name="clean" depends="setup" description="Remove the artifacts generated by this build">
        <delete dir="${sample.out}"/>
        <delete dir="${build}/lib"/>
    </target>
</project>
